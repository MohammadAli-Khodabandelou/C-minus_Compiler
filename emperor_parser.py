class Parser:
    PRODUCTIONS = {'Program': [['Declaration_list', '$']],
                   'Declaration_list': [['Declaration', 'Declaration_list'], ['EPSILON']],
                   'Declaration': [['Declaration_initial', 'Declaration_prime']],
                   'Declaration_initial': [['Type_specifier', 'ID']],
                   'Declaration_prime': [['Fun_declaration_prime'], ['Var_declaration_prime']],
                   'Var_declaration_prime': [[';'], ['[', 'NUM', ']', ';']],
                   'Fun_declaration_prime': [['(', 'Params', ')', 'Compound_stmt']],
                   'Type_specifier': [['int'], ['void']],
                   'Params': [['int', 'ID', 'Param_prime', 'Param_list'], ['void']],
                   'Param_list': [[',', 'Param', 'Param_list'], ['EPSILON']],
                   'Param': [['Declaration_initial', 'Param_prime']],
                   'Param_prime': [['[', ']'], ['EPSILON']],
                   'Compound_stmt': [['{', 'Declaration_list', 'Statement_list', '}']],
                   'Statement_list': [['Statement', 'Statement_list'], ['EPSILON']],
                   'Statement': [['Expression_stmt'], ['Compound_stmt'], ['Selection_stmt'], ['Iteration_stmt'],
                                 ['Return_stmt']],
                   'Expression_stmt': [['Expression', ';'], ['break', ';'], [';']],
                   'Selection_stmt': [['if', '(', 'Expression', ')', 'Statement', 'Else_stmt']],
                   'Else_stmt': [['endif'], ['else', 'Statement', 'endif']],
                   'Iteration_stmt': [['repeat', 'Statement', 'until', '(', 'Expression', ')']],
                   'Return_stmt': [['return', 'Return_stmt_prime']],
                   'Return_stmt_prime': [[';'], ['Expression', ';']],
                   'Expression': [['Simple_expression_zegond'], ['ID', 'B']],
                   'B': [['=', 'Expression'], ['[', 'Expression', ']', 'H'], ['Simple_expression_prime']],
                   'H': [['=', 'Expression'], ['G', 'D', 'C']],
                   'Simple_expression_zegond': [['Additive_expression_zegond', 'C']],
                   'Simple_expression_prime': [['Additive_expression_prime', 'C']],
                   'C': [['Relop', 'Additive_expression'], ['EPSILON']],
                   'Relop': [['<'], ['==']],
                   'Additive_expression': [['Term', 'D']],
                   'Additive_expression_prime': [['Term_prime', 'D']],
                   'Additive_expression_zegond': [['Term_zegond', 'D']],
                   'D': [['Addop', 'Term', 'D'], ['EPSILON']],
                   'Addop': [['+'], ['-']],
                   'Term': [['Factor', 'G']],
                   'Term_prime': [['Factor_prime', 'G']],
                   'Term_zegond': [['Factor_zegond', 'G']],
                   'G': [['*', 'Factor', 'G'], ['EPSILON']],
                   'Factor': [['(', 'Expression', ')'], ['ID', 'Var_call_prime'], ['NUM']],
                   'Var_call_prime': [['(', 'Args', ')'], ['Var_prime']],
                   'Var_prime': [['[', 'Expression', ']'], ['EPSILON']],
                   'Factor_prime': [['(', 'Args', ')'], ['EPSILON']],
                   'Factor_zegond': [['(', 'Expression', ')'], ['NUM']],
                   'Args': [['Arg_list'], ['EPSILON']],
                   'Arg_list': [['Expression', 'Arg_list_prime']],
                   'Arg_list_prime': [[',', 'Expression', 'Arg_list_prime'], ['EPSILON']]
                   }

    PREDICTS = {'Program': [['int', 'void', '$']],
                'Declaration_list': [['int', 'void'],
                                     ['$', '{', 'break', ';', 'if', 'repeat', 'return', 'ID', '(', 'NUM', '}']],
                'Declaration': [['int', 'void']],
                'Declaration_initial': [['int', 'void']],
                'Declaration_prime': [['('], [';', '[']],
                'Var_declaration_prime': [[';'], ['[']],
                'Fun_declaration_prime': [['(']],
                'Type_specifier': [['int'], ['void']],
                'Params': [['int'], ['void']],
                'Param_list': [[','], [')']],
                'Param': [['int', 'void']],
                'Param_prime': [['['], [',', ')']],
                'Compound_stmt': [['{']],
                'Statement_list': [['{', 'break', ';', 'if', 'repeat', 'return', 'ID', '(', 'NUM'], ['}']],
                'Statement': [['break', ';', 'ID', '(', 'NUM'], ['{'], ['if'], ['repeat'], ['return']],
                'Expression_stmt': [['ID', '(', 'NUM'], ['break'], [';']],
                'Selection_stmt': [['if']],
                'Else_stmt': [['endif'], ['else']],
                'Iteration_stmt': [['repeat']],
                'Return_stmt': [['return']],
                'Return_stmt_prime': [[';'], ['ID', '(', 'NUM']],
                'Expression': [['(', 'NUM'], ['ID']],
                'B': [['='], ['['], ['(', '*', '+', '-', '<', '==', ';', ')', ']', ',']],
                'H': [['='], ['*', '+', '-', '<', '==', ';', ')', ']', ',']],
                'Simple_expression_zegond': [['(', 'NUM']],
                'Simple_expression_prime': [['(', '*', '+', '-', '<', '==', ';', ')', ']', ',']],
                'C': [['<', '=='], [';', ')', ']', ',']],
                'Relop': [['<'], ['==']],
                'Additive_expression': [['(', 'ID', 'NUM']],
                'Additive_expression_prime': [['(', '*', '+', '-', '<', '==', ';', ')', ']', ',']],
                'Additive_expression_zegond': [['(', 'NUM']],
                'D': [['+', '-'], ['<', '==', ';', ')', ']', ',']],
                'Addop': [['+'], ['-']],
                'Term': [['(', 'ID', 'NUM']],
                'Term_prime': [['(', '*', '+', '-', '<', '==', ';', ')', ']', ',']],
                'Term_zegond': [['(', 'NUM']],
                'G': [['*'], ['+', '-', '<', '==', ';', ')', ']', ',']],
                'Factor': [['('], ['ID'], ['NUM']],
                'Var_call_prime': [['('], ['[', '*', '+', '-', ';', ')', '<', '==', ']', ',']],
                'Var_prime': [['['], ['*', '+', '-', ';', ')', '<', '==', ']', ',']],
                'Factor_prime': [['('], ['*', '+', '-', '<', '==', ';', ')', ']', ',']],
                'Factor_zegond': [['('], ['NUM']],
                'Args': [['ID', '(', 'NUM'], [')']],
                'Arg_list': [['ID', '(', 'NUM']],
                'Arg_list_prime': [[','], [')']]
                }

    FOLLOWS = {'Declaration_list': ['$', '{', 'break', ';', 'if', 'repeat', 'return', 'ID', '(', 'NUM', '}'],
               'Declaration': ['int', 'void', '$', '{', 'break', ';', 'if', 'repeat', 'return', 'ID', '(', 'NUM', '}'],
               'Declaration_initial': ['(', ';', '[', ',', ')'],
               'Declaration_prime': ['int', 'void', '$', '{', 'break', ';', 'if', 'repeat', 'return', 'ID', '(', 'NUM',
                                     '}'],
               'Var_declaration_prime': ['int', 'void', '$', '{', 'break', ';', 'if', 'repeat', 'return', 'ID', '(',
                                         'NUM', '}'],
               'Fun_declaration_prime': ['int', 'void', '$', '{', 'break', ';', 'if', 'repeat', 'return', 'ID', '(',
                                         'NUM', '}'],
               'Type_specifier': ['ID'],
               'Params': [')'],
               'Param_list': [')'],
               'Param': [',', ')'],
               'Param_prime': [',', ')'],
               'Compound_stmt': ['int', 'void', '$', '{', 'break', ';', 'if', 'repeat', 'return', 'ID', '(', 'NUM', '}',
                                 'endif', 'else', 'until'],
               'Statement_list': ['}'],
               'Statement': ['{', 'break', ';', 'if', 'repeat', 'return', 'ID', '(', 'NUM', '}', 'endif', 'else',
                             'until'],
               'Expression_stmt': ['{', 'break', ';', 'if', 'repeat', 'return', 'ID', '(', 'NUM', '}', 'endif', 'else',
                                   'until'],
               'Selection_stmt': ['{', 'break', ';', 'if', 'repeat', 'return', 'ID', '(', 'NUM', '}', 'endif', 'else',
                                  'until'],
               'Else_stmt': ['{', 'break', ';', 'if', 'repeat', 'return', 'ID', '(', 'NUM', '}', 'endif', 'else',
                             'until'],
               'Iteration_stmt': ['{', 'break', ';', 'if', 'repeat', 'return', 'ID', '(', 'NUM', '}', 'endif', 'else',
                                  'until'],
               'Return_stmt': ['{', 'break', ';', 'if', 'repeat', 'return', 'ID', '(', 'NUM', '}', 'endif', 'else',
                               'until'],
               'Return_stmt_prime': ['{', 'break', ';', 'if', 'repeat', 'return', 'ID', '(', 'NUM', '}', 'endif',
                                     'else', 'until'],
               'Expression': [';', ')', ']', ','],
               'B': [';', ')', ']', ','],
               'H': [';', ')', ']', ','],
               'Simple_expression_zegond': [';', ')', ']', ','],
               'Simple_expression_prime': [';', ')', ']', ','],
               'C': [';', ')', ']', ','],
               'Relop': ['(', 'ID', 'NUM'],
               'Additive_expression': [';', ')', ']', ','],
               'Additive_expression_prime': ['<', '==', ';', ')', ']', ','],
               'Additive_expression_zegond': ['<', '==', ';', ')', ']', ','],
               'D': ['<', '==', ';', ')', ']', ','],
               'Addop': ['(', 'ID', 'NUM'],
               'Term': ['+', '-', ';', ')', '<', '==', ']', ','],
               'Term_prime': ['+', '-', '<', '==', ';', ')', ']', ','],
               'Term_zegond': ['+', '-', '<', '==', ';', ')', ']', ','],
               'G': ['+', '-', '<', '==', ';', ')', ']', ','],
               'Factor': ['*', '+', '-', ';', ')', '<', '==', ']', ','],
               'Var_call_prime': ['*', '+', '-', ';', ')', '<', '==', ']', ','],
               'Var_prime': ['*', '+', '-', ';', ')', '<', '==', ']', ','],
               'Factor_prime': ['*', '+', '-', '<', '==', ';', ')', ']', ','],
               'Factor_zegond': ['*', '+', '-', '<', '==', ';', ')', ']', ','],
               'Args': [')'],
               'Arg_list': [')'],
               'Arg_list_prime': [')'],
               }

    FIRSTS = {'Program': ['$', 'int', 'void'],
              'Declaration_list': ['EPSILON', 'int', 'void'],
              'Declaration': ['int', 'void'],
              'Declaration_initial': ['int', 'void'],
              'Declaration_prime': ['(', ';', '['],
              'Var_declaration_prime': [';', '['],
              'Fun_declaration_prime': ['('],
              'Type_specifier': ['int', 'void'],
              'Params': ['int', 'void'],
              'Param_list': [',', 'EPSILON'],
              'Param': ['int', 'void'],
              'Param_prime': ['[', 'EPSILON'],
              'Compound_stmt': ['{'],
              'Statement_list': ['EPSILON', '{', 'break', ';', 'if', 'repeat', 'return', 'ID', '(', 'NUM'],
              'Statement': ['{', 'break', ';', 'if', 'repeat', 'return', 'ID', '(', 'NUM'],
              'Expression_stmt': ['break', ';', 'ID', '(', 'NUM'],
              'Selection_stmt': ['if'],
              'Else_stmt': ['endif', 'else'],
              'Iteration_stmt': ['repeat'],
              'Return_stmt': ['return'],
              'Return_stmt_prime': [';', 'ID', '(', 'NUM'],
              'Expression': ['ID', '(', 'NUM'],
              'B': ['=', '[', '(', '*', '+', '-', '<', '==', 'EPSILON'],
              'H': ['=', '*', 'EPSILON', '+', '-', '<', '=='],
              'Simple_expression_zegond': ['(', 'NUM'],
              'Simple_expression_prime': ['(', '*', '+', '-', '<', '==', 'EPSILON'],
              'C': ['EPSILON', '<', '=='],
              'Relop': ['<', '=='],
              'Additive_expression': ['(', 'ID', 'NUM'],
              'Additive_expression_prime': ['(', '*', '+', '-', 'EPSILON'],
              'Additive_expression_zegond': ['(', 'NUM'],
              'D': ['EPSILON', '+', '-'],
              'Addop': ['+', '-'],
              'Term': ['(', 'ID', 'NUM'],
              'Term_prime': ['(', '*', 'EPSILON'],
              'Term_zegond': ['(', 'NUM'],
              'G': ['*', 'EPSILON'],
              'Factor': ['(', 'ID', 'NUM'],
              'Var_call_prime': ['(', '[', 'EPSILON'],
              'Var_prime': ['[', 'EPSILON'],
              'Factor_prime': ['(', 'EPSILON'],
              'Factor_zegond': ['(', 'NUM'],
              'Args': ['EPSILON', 'ID', '(', 'NUM'],
              'Arg_list': ['ID', '(', 'NUM'],
              'Arg_list_prime': [',', 'EPSILON']
              }

    scany = None

    def __init__(self):
        self.scany = None

    def set_scanner(self, scanner_instance):
        self.scany = scanner_instance

    def run(self):
        stack = ['Program']
        while True:
            next_token = self.scany.get_next_token()

            if next_token == '(KEYWORD, $)':
                break
